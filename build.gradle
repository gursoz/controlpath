project.defaultTasks 'mybuild'

dependencies  {
  files('/home/cyc/Test/learngit/gitmodule/parentrepo/bedrock/output/buildTime')
}

@CacheableTask
abstract class TridentBuild extends DefaultTask {
   Boolean forceBuild = null

   // The actual action to perform the build
    @TaskAction
    void build() {
        doBuild()
    }

    @Input
    Map<String,String> getInputProperties() {
       def inputMap = [:]
       if(forceBuild==true) {
          inputMap['timestamp'] = LocalDateTime.now().toString()
       }
       return inputMap
    }

    @InputDirectory
    abstract DirectoryProperty getSrcInputDir()

    @InputDirectory
    abstract DirectoryProperty getBedrockSrcDir()

    @InputDirectory
    abstract DirectoryProperty getTestInputDir()

    @OutputDirectory
    abstract DirectoryProperty getOutputDir()

    @Option( option = 'force', description = 'Build even if not stale in cache. Will build all tasks on which this task is dependent')
    void setForceBuild(final Boolean ignoreVal) {
       forceBuild = true
    }
    

    def doBuild() {
        project.exec {
          workingDir '.'
	  commandLine './build/build.sh'
        }
    }
}


task mybuild(type: TridentBuild) {
  description 'Builds controlpath by invoking build.sh'
  dependsOn ':bedrock:mybuild'
  srcInputDir = file('/home/cyc/Test/learngit/gitmodule/parentrepo/controlpath/src/main/java/com/dell/controlpath')
  testInputDir = file('/home/cyc/Test/learngit/gitmodule/parentrepo/controlpath/src/test/java/com/dell/controlpath')
  bedrockSrcDir = file('/home/cyc/Test/learngit/gitmodule/parentrepo/bedrock/src/')
  outputDir = file('./output')
}
